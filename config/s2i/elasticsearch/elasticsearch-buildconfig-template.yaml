apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: elasticsearch
  annotations:
    openshift.io/display-name: elasticsearch
    description: |-
              contra elasticsearch template
    iconClass: icon-jenkins
    tags: instant-app,elasticsearch
    template.openshift.io/long-description: Elasticsearch container
    template.openshift.io/provider-display-name: Red Hat, Inc.
    template.openshift.io/documentation-url: https://docs.openshift.org/latest
    template.openshift.io/support-url: https://access.redhat.com
parameters:
- name: INSTANCE_NAME
  description: ES Instance name
  required: true
- name: STORAGE_SIZE
  value: 10Gi
  description: The size of the persistent storage for Elasticsearch
- name: REPO_URL
  value: https://github.com/joejstuart/ci-pipeline.git
  description: The dockerfile repo url
- name: REPO_CONTEXTDIR
  description: The sub-directory inside the repository.
  value: config/Dockerfiles/elasticsearch
- name: REPO_REF
  description: The git ref or tag to use for customization.
  value: newes
- name: ELASTICSEARCH_VERSION
  value: 5.6.8
  description: The es version
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
    labels:
      component: elasticsearch
    name: elasticsearch
  spec: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: "${INSTANCE_NAME}"
    labels: 
      component: elasticsearch
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: elasticsearch:latest
    resources: {}
    source:
      contextDir: ${REPO_CONTEXTDIR}
      git:
        ref: ${REPO_REF}
        uri: ${REPO_URL}
      type: Git
    strategy:
      dockerStrategy:
        env:
          - name: ELASTICSEARCH_VERSION
            value: ${ELASTICSEARCH_VERSION}
      type: Docker
    triggers:
    - type: ConfigChange
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${INSTANCE_NAME}-data"
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${STORAGE_SIZE}
- kind: Route
  apiVersion: v1
  metadata:
    labels:
      route: "elasticsearch-${INSTANCE_NAME}"
      component: elasticsearch
    name: "${INSTANCE_NAME}"
    creationTimestamp:
  spec:
    port:
      targetPort: api-http
    to:
      kind: Service
      name: elasticsearch-api
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      metrics: "elasticsearch-${INSTANCE_NAME}"
      component: elasticsearch
    name: "${INSTANCE_NAME}"
  spec:
    strategy:
        type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - elasticsearch
        from:
          kind: ImageStreamTag
          name: elasticsearch:latest
          namespace: continuous-infra
          lastTriggeredImage: ''
    - type: ConfigChange
    replicas: 1
    selector:
      metrics: "elasticsearch-${INSTANCE_NAME}"
      component: elasticsearch
    template:
      metadata:
        creationTimestamp: null
        labels:
          metrics: elasticsearch-${INSTANCE_NAME}
          component: elasticsearch
      spec:
        containers:
        - env:
          - name: ELASTICSEARCH_VERSION
            value: ${ELASTICSEARCH_VERSION}
          - name: CLUSTER_NAME
            value: contra
          image: elasticsearch:stable
          imagePullPolicy: Always
          name: elasticsearch
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: _cluster/health
              port: 9200
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: _cluster/health
              port: 9200
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 9200
              protocol: TCP
            - name: transport
              containerPort: 9300
              protocol: TCP
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: "${INSTANCE_NAME}-data"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: "${INSTANCE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${INSTANCE_NAME}-data"
  status: {}
labels:
  template: elasticsearch
